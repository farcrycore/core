<cfcomponent displayname="scrypt (very strong; not as heavily tested as bcrypt)" hint="I encode passwords using scrypt, which was designed to be far stronger than bcrypt." extends="PasswordHash"
			alias="scrypt" seq="9500" workFactor="14" memoryCost="8" parallelFactor="1">


	<cffunction name="init" access="public" output="true" returntype="any" hint="constructor">
		<cfargument name="cryptLib" type="any" hint="Interface to 3rd-party Java crypto libraries" />
		
		<cfset super.init() />
		
		<!--- Allow the java loader to fail silently: we can report the failure via isAvailable() --->
		<cftry>
			<cfset variables.oSCryptClass = createJavaClass("com.lambdaworks.crypto.SCryptUtil") />
			<cfcatch></cfcatch>
		</cftry>
		
		<!--- scrypt's cpuCost paramater = 2^workfactor (which is equivalent to bit shifting) --->
		<cfset variables.cpuCost = BitSHLN(1,this.workFactor) />
		
		<!--- Calculate the hash parameters string now so we can compare it to hashed passwords later --->
		<cfset variables.hashParams = FormatBaseN(this.parallelFactor,16) />
		<cfif Len(variables.hashParams) lt 2>
			<cfset variables.hashParams = "0" & variables.hashParams />
		</cfif>
		<cfset variables.hashParams = FormatBaseN(this.memoryCost,16) & variables.hashParams />
		<cfif Len(variables.hashParams) lt 4>
			<cfset variables.hashParams = "0" & variables.hashParams />
		</cfif>
		<cfset variables.hashParams = FormatBaseN(this.workFactor,16) & variables.hashParams />
		
		<cfreturn this />
	</cffunction>

	<cffunction name="isAvailable" hint="Is the hashing agorithm available in this environment?" access="public" returntype="boolean">
		<cfreturn structKeyExists(variables,"oSCryptClass") />
	</cffunction>

	<cffunction name="matchesHashFormat" hint="Does the string match the format for this hash?" access="public" returntype="boolean">
		<cfargument name="input" type="string" hint="String that may be a password hash" required="true" />
		
		<cfreturn REFind("^\$s0\$[0-9a-z]+\$[\+/A-Za-z0-9]+=*\$[\+/A-Za-z0-9]+=*$",arguments.input) />
	</cffunction>

	<cffunction name="encode" hint="Convert a clear password to its encoded value" access="public" returntype="string">
		<cfargument name="password" type="string" hint="Input password" required="true" />
		
		<cfreturn variables.oSCryptClass.scrypt(arguments.password,variables.cpuCost,this.memoryCost,this.parallelFactor) />
	</cffunction>

	<cffunction name="getHashParams" hint="Retrieve the hash params from a hashed string" access="public" returntype="string">
		<cfargument name="hashedPassword" type="string" hint="Previously encoded password string" required="true" />
		
		<cfset var stMatch = ReFind("^\$s0\$([0-9a-z]+)\$[\+/A-Za-z0-9]+=*\$[\+/A-Za-z0-9]+=*$",arguments.hashedPassword,1,"true") />
		<cfif stMatch.pos[1] eq 0>
			<cfreturn 0>
		<cfelse>
			<cfreturn mid(arguments.hashedPassword,stMatch.pos[2],stMatch.len[2])>
		</cfif>
	</cffunction>

	<cffunction name="passwordMatch" hint="Compare a plain password against an encoded string" access="public" returntype="boolean">
		<cfargument name="password" type="string" hint="Input password" required="true" />
		<cfargument name="hashedPassword" type="string" hint="Previously encoded password string" required="true" />
		<cfargument name="bCheckHashStrength" type="boolean" default="false" hint="If true, the hash strength of the hashed password must also match those generated by encode()" />
		
		<cfset var bMatch = variables.oSCryptClass.check(arguments.password,arguments.hashedPassword) />
		
		<cfif bMatch and bCheckHashStrength>
			<!--- Hash matched but we also need to match the hash parameters --->
			<cfreturn getHashParams(arguments.hashedPassword) eq variables.hashParams />
		<cfelse>
			<cfreturn bMatch />
		</cfif>
	</cffunction>

</cfcomponent>