<cfcomponent title="bcrypt (strong; recommended)" hint="I encode passwords using a popular secure password hashing algorithm called bcrypt. I am very slow, but that makes me very secure!" extends="PasswordHash"
			alias="bcrypt" seq="9001" workFactor="10">


	<cffunction name="init" access="public" output="true" returntype="any" hint="constructor">
		
		<cfset super.init() />
		
		<!--- Allow java loader to fail silently: we can report the failure via isAvailable() --->
		<cftry>
			<cfset variables.oBCryptClass = createJavaClass("org.mindrot.jbcrypt.BCrypt") />
			<cfcatch></cfcatch>
		</cftry>
		
		<cfreturn this />
	</cffunction>
	
	<cffunction name="isAvailable" hint="Is the hashing agorithm available in this environment?" access="public" returntype="boolean">
		<cfreturn structKeyExists(variables,"oBCryptClass") />
	</cffunction>

	<cffunction name="matchesHashFormat" hint="Does the string match the format for this hash?" access="public" returntype="boolean">
		<cfargument name="input" type="string" hint="String that may be a password hash" required="true" />
		
		<cfreturn REFind("^\$2a\$\d+\$[\./A-Za-z0-9]+$",arguments.input) />
	</cffunction>

	<cffunction name="encode" hint="Convert a clear password to its encoded value" access="public" returntype="string">
		<cfargument name="password" type="string" hint="Input password" required="true" />
		
		<cfset var salt = variables.oBCryptClass.gensalt(JavaCast("int",this.workFactor)) />
		<cfreturn variables.oBCryptClass.hashpw(arguments.password,salt) />
	</cffunction>

	<cffunction name="getHashWorkFactor" hint="Retrieve the work factor from a hashed string" access="public" returntype="numeric">
		<cfargument name="hashedPassword" type="string" hint="Previously encoded password string" required="true" />
		
		<cfset var stMatch = ReFind("^\$2a\$(\d+)\$([\./A-Za-z0-9]+)$",arguments.hashedPassword,1,"true") />
		<cfif stMatch.pos[1] eq 0>
			<cfreturn 0>
		<cfelse>
			<cfreturn mid(arguments.hashedPassword,stMatch.pos[2],stMatch.len[2])>
		</cfif>
	</cffunction>

	<cffunction name="passwordMatch" hint="Compare a plain password against an encoded string" access="public" returntype="boolean">
		<cfargument name="password" type="string" hint="Input password" required="true" />
		<cfargument name="hashedPassword" type="string" hint="Previously encoded password string" required="true" />
		<cfargument name="bCheckHashStrength" type="boolean" default="false" hint="If true, the hash strength of the hashed password must also match those generated by encode()" />
		
		<cfset var bMatch = variables.oBCryptClass.checkpw(arguments.password,arguments.hashedPassword) />
		
		<cfif bMatch and bCheckHashStrength>
			<!--- Hash matched but we also need to match the bCrypt work factor --->
			<cfreturn getHashWorkFactor(arguments.hashedPassword) eq this.workFactor />
		<cfelse>
			<cfreturn bMatch />
		</cfif>
	</cffunction>

</cfcomponent>